{"version":3,"sources":["Components/LoginScreen.js","firebase-config.js","Components/FormValidation.js"],"names":["LoginScreen","isLoading","setIsLoading","useAuthState","auth","user","loading","navigate","useNavigate","useEffect","replace","form","useRef","useForm","resolver","yupResolver","loginScreenValidation","register","handleSubmit","errors","formState","className","noValidate","ref","onSubmit","data","logInWithEmailAndPassword","Email","Password","Group","controlId","Control","required","type","placeholder","name","message","to","variant","onClick","signInWithGoogle","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth","db","getFirestore","fetchDataToDB","q","query","collection","where","uid","getDocs","docs","length","addDoc","displayName","authProvider","email","console","error","alert","googleProvider","GoogleAuthProvider","signInWithRedirect","password","signInWithEmailAndPassword","registerWithEmailAndPassword","createUserWithEmailAndPassword","res","sendPasswordReset","sendPasswordResetEmail","logout","signOut","yup","shape","resetPasswordValidation","registerScreenValidation","Name","min","BudgetName"],"mappings":"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","file":"static/js/7.5f739cd3.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { auth, logInWithEmailAndPassword, signInWithGoogle } from \"../firebase-config\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { MDBCard } from 'mdb-react-ui-kit';\nimport {LinkContainer} from \"react-router-bootstrap\";\nimport {Button, Form} from \"react-bootstrap\";\nimport LoadingScreen from \"./LoadingScreen\";\nimport {yupResolver} from \"@hookform/resolvers/yup\";\nimport {useForm} from \"react-hook-form\";\nimport {loginScreenValidation} from \"./FormValidation\";\n\nconst LoginScreen = ({isLoading, setIsLoading}) =>  {\n\n\n    // const [email, setEmail] = useState(\"\");\n    // const [password, setPassword] = useState(\"\");\n    const [user, loading] = useAuthState(auth);\n    const navigate = useNavigate();\n    useEffect(() => {\n        if (loading) {\n            setIsLoading(true);\n            return;\n        }\n\n        if(loading === false) {\n            setIsLoading(false);\n        }\n\n        if (user){\n            navigate(\"/dashboard\", { replace: true });\n        }\n    }, [user, loading, navigate]);\n\n    const form = useRef();\n\n    const {register, handleSubmit, formState: {errors}} = useForm({\n        resolver: yupResolver(loginScreenValidation)\n    });\n\n    const onSubmit = (data) => {\n        logInWithEmailAndPassword(data.Email, data.Password);\n    }\n\n\n    return (\n        <>\n        {isLoading ? <LoadingScreen/> :\n                <div className={\"Login-Container\"}>\n                    <MDBCard>\n                        <Form noValidate  ref={form} onSubmit={handleSubmit(onSubmit)} className={'Form-Contact'}>\n\n                            <Form.Group className=\"form-content\" controlId=\"formBasicEmail\">\n                                <Form.Control required type=\"text\" placeholder=\"Email\" name=\"user_email\" {...register(\"Email\")}/>\n                                <p>{errors.Email?.message}</p>\n                            </Form.Group>\n\n                            <Form.Group className=\"form-content\" controlId=\"formBasicPassword\">\n                                <Form.Control required type=\"password\" placeholder=\"Password\" name=\"user_password\" {...register(\"Password\")}/>\n                                <p>{errors.Password?.message}</p>\n                            </Form.Group>\n                            <LinkContainer to=\"/reset\">\n                                <a>Forgot password?</a>\n                            </LinkContainer>\n                            <Button variant=\"secondary\" type=\"submit\" className={'Button-Login'}>\n                                Login\n                            </Button>\n                            <p>Not a member? <LinkContainer to=\"/register\"><a>Register</a></LinkContainer></p>\n                            <p>or sign up with:</p>\n                            <Button onClick={signInWithGoogle} className='Button-Register' variant={'secondary'}>\n                                Google\n                            </Button>\n                        </Form>\n                    </MDBCard>\n                </div>\n        }\n        </>\n    );\n}\n\n\nexport default LoginScreen;\n","// Import the functions you need from the SDKs you need\nimport {initializeApp} from \"firebase/app\";\nimport {\n    GoogleAuthProvider,\n    getAuth,\n    signInWithRedirect,\n    signInWithEmailAndPassword,\n    createUserWithEmailAndPassword,\n    sendPasswordResetEmail,\n    signOut\n} from \"firebase/auth\";\nimport {\n    getFirestore,\n    query,\n    getDocs,\n    collection,\n    where,\n    addDoc\n} from \"firebase/firestore\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC3DMSjnUoA9dF9GM17-cXY2vGrD01UOsg\",\n    authDomain: \"budget-app-fba0d.firebaseapp.com\",\n    projectId: \"budget-app-fba0d\",\n    storageBucket: \"budget-app-fba0d.appspot.com\",\n    messagingSenderId: \"304622335247\",\n    appId: \"1:304622335247:web:fed99b704be7ad5cdafa7a\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth();\nconst db = getFirestore();\n\nconst fetchDataToDB = async (user) => {\n    try{\n        const q = query(collection(db, \"users\"), where(\"uid\", \"==\", user.uid));\n        const docs = await getDocs(q);\n        if (docs.docs.length === 0) {\n            await addDoc(collection(db, \"users\"), {\n                uid: user.uid,\n                name: user.displayName,\n                authProvider: \"google\",\n                email: user.email\n            });\n        }\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\n\nconst googleProvider = new GoogleAuthProvider();\nconst signInWithGoogle = async () => {\n    try {\n        await signInWithRedirect(auth, googleProvider);\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\n\nconst logInWithEmailAndPassword = async (email, password) => {\n    try {\n        await signInWithEmailAndPassword(auth, email, password);\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\nconst registerWithEmailAndPassword = async (name, email, password) => {\n    try {\n        const res = await createUserWithEmailAndPassword(auth, email, password);\n        const user = res.user;\n        await addDoc(collection(db, \"users\"), {\n            uid: user.uid,\n            name,\n            authProvider: \"local\",\n            email\n        });\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\nconst sendPasswordReset = async (email) => {\n    try {\n        await sendPasswordResetEmail(auth, email);\n        alert(\"Password reset email sent\");\n\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\nconst logout = () => {\n    signOut(auth);\n};\nexport {\n    auth,\n    db,\n    signInWithGoogle,\n    logInWithEmailAndPassword,\n    registerWithEmailAndPassword,\n    sendPasswordReset,\n    logout,\n    fetchDataToDB\n};\n","import * as yup from 'yup';\n\nconst loginScreenValidation = yup.object().shape({\n    Email: yup.string().email(\"Please provide a valid email.\").required(\"Email is required.\"),\n    Password: yup.string().required(\"Password is required.\")\n});\n\nconst resetPasswordValidation = yup.object().shape({\n    Email: yup.string().email(\"Please provide a valid email.\").required(\"Email is required.\")\n});\n\nconst registerScreenValidation = yup.object().shape({\n    Name: yup.string().required(\"Name is required.\"),\n    Email: yup.string().email(\"Please provide a valid email.\").required(\"Email is required.\"),\n    Password: yup.string().required(\"Password is required.\").min(6, \"Password must be at least 6 characters.\")\n});\n\nconst addBudgetValidation = yup.object().shape({\n    BudgetName: yup.string().required(\"Budget name is required.\")\n});\n\nexport {loginScreenValidation, resetPasswordValidation, registerScreenValidation, addBudgetValidation};\n\n"],"sourceRoot":""}