{"version":3,"sources":["Components/RegisterScreen.js","firebase-config.js","Components/FormValidation.js"],"names":["RegisterScreen","isLoading","setIsLoading","useState","useAuthState","auth","user","loading","navigate","useNavigate","useEffect","replace","form","useRef","useForm","resolver","yupResolver","registerScreenValidation","register","handleSubmit","errors","formState","onSubmit","data","registerWithEmailAndPassword","Name","Email","Password","className","ref","Group","controlId","Control","type","placeholder","name","message","variant","to","onClick","signInWithGoogle","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth","db","getFirestore","fetchDataToDB","q","query","collection","where","uid","getDocs","docs","length","addDoc","displayName","authProvider","email","console","error","alert","googleProvider","GoogleAuthProvider","signInWithRedirect","logInWithEmailAndPassword","password","signInWithEmailAndPassword","createUserWithEmailAndPassword","res","sendPasswordReset","sendPasswordResetEmail","logout","signOut","loginScreenValidation","yup","shape","required","resetPasswordValidation","min","BudgetName"],"mappings":"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","file":"static/js/8.2cab2526.chunk.js","sourcesContent":["import {MDBCard} from \"mdb-react-ui-kit\";\nimport React, {useEffect, useRef, useState} from \"react\";\nimport {useAuthState} from \"react-firebase-hooks/auth\";\nimport {useNavigate} from \"react-router-dom\";\nimport {\n    auth,\n    registerWithEmailAndPassword, signInWithGoogle,\n} from \"../firebase-config\";\nimport {Button, Form} from \"react-bootstrap\";\nimport {LinkContainer} from \"react-router-bootstrap\";\nimport LoadingScreen from \"./LoadingScreen\";\nimport {yupResolver} from \"@hookform/resolvers/yup\";\nimport {registerScreenValidation} from \"./FormValidation\";\nimport {useForm} from \"react-hook-form\";\n\nfunction RegisterScreen({isLoading, setIsLoading}) {\n\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [user, loading] = useAuthState(auth);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        if (loading) {\n            setIsLoading(true);\n            return\n        }\n        if (loading === false) {\n            setIsLoading(false);\n        }\n        if (user) navigate('/dashboard', {replace: true})\n    }, [user, loading, navigate]);\n\n    const form = useRef();\n\n    const {register, handleSubmit, formState: {errors}} = useForm({\n        resolver: yupResolver(registerScreenValidation)\n    });\n\n    const onSubmit = async (data) => {\n        registerWithEmailAndPassword(data.Name, data.Email, data.Password);\n    };\n\n    return (\n        <>\n            {isLoading ? <LoadingScreen/> :\n                <div className={\"Register-Container\"}>\n                    <MDBCard>\n                        <Form ref={form} onSubmit={handleSubmit(onSubmit)} className={'Form-Contact'}>\n                            <Form.Group className=\"form-content\" controlId=\"formBasicName\">\n                                <Form.Control type=\"name\" placeholder=\"Name\" name=\"user_name\" {...register(\"Name\")}/>\n                                <p>{errors.Name?.message}</p>\n                            </Form.Group>\n\n                            <Form.Group className=\"form-content\" controlId=\"formBasicEmail\">\n                                <Form.Control type=\"text\" placeholder=\"Email\" name=\"user_email\" {...register(\"Email\")}/>\n                                <p>{errors.Email?.message}</p>\n                            </Form.Group>\n\n                            <Form.Group className=\"form-content\" controlId=\"formBasicPassword\">\n                                <Form.Control type=\"password\" placeholder=\"Password\" name=\"user_password\" {...register(\"Password\")}/>\n                                <p>{errors.Password?.message}</p>\n                            </Form.Group>\n                            <Button variant=\"secondary\" type=\"submit\" className={'Button-Login'}>\n                                Register\n                            </Button>\n                            <p>Already have account? <LinkContainer to={'/login'}>\n                                <a>Login</a>\n                            </LinkContainer></p>\n                            <p>or sign up with:</p>\n                            <Button onClick={signInWithGoogle} className='Button-Login' variant={'secondary'}>\n                                Google\n                            </Button>\n                        </Form>\n                    </MDBCard>\n                </div>\n            }\n        </>\n    );\n}\n\nexport default RegisterScreen;\n","// Import the functions you need from the SDKs you need\nimport {initializeApp} from \"firebase/app\";\nimport {\n    GoogleAuthProvider,\n    getAuth,\n    signInWithRedirect,\n    signInWithEmailAndPassword,\n    createUserWithEmailAndPassword,\n    sendPasswordResetEmail,\n    signOut\n} from \"firebase/auth\";\nimport {\n    getFirestore,\n    query,\n    getDocs,\n    collection,\n    where,\n    addDoc\n} from \"firebase/firestore\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC3DMSjnUoA9dF9GM17-cXY2vGrD01UOsg\",\n    authDomain: \"budget-app-fba0d.firebaseapp.com\",\n    projectId: \"budget-app-fba0d\",\n    storageBucket: \"budget-app-fba0d.appspot.com\",\n    messagingSenderId: \"304622335247\",\n    appId: \"1:304622335247:web:fed99b704be7ad5cdafa7a\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth();\nconst db = getFirestore();\n\nconst fetchDataToDB = async (user) => {\n    try{\n        const q = query(collection(db, \"users\"), where(\"uid\", \"==\", user.uid));\n        const docs = await getDocs(q);\n        if (docs.docs.length === 0) {\n            await addDoc(collection(db, \"users\"), {\n                uid: user.uid,\n                name: user.displayName,\n                authProvider: \"google\",\n                email: user.email\n            });\n        }\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\n\nconst googleProvider = new GoogleAuthProvider();\nconst signInWithGoogle = async () => {\n    try {\n        await signInWithRedirect(auth, googleProvider);\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\n\nconst logInWithEmailAndPassword = async (email, password) => {\n    try {\n        await signInWithEmailAndPassword(auth, email, password);\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\nconst registerWithEmailAndPassword = async (name, email, password) => {\n    try {\n        const res = await createUserWithEmailAndPassword(auth, email, password);\n        const user = res.user;\n        await addDoc(collection(db, \"users\"), {\n            uid: user.uid,\n            name,\n            authProvider: \"local\",\n            email\n        });\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\nconst sendPasswordReset = async (email) => {\n    try {\n        await sendPasswordResetEmail(auth, email);\n        alert(\"Password reset email sent\");\n\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\nconst logout = () => {\n    signOut(auth);\n};\nexport {\n    auth,\n    db,\n    signInWithGoogle,\n    logInWithEmailAndPassword,\n    registerWithEmailAndPassword,\n    sendPasswordReset,\n    logout,\n    fetchDataToDB\n};\n","import * as yup from 'yup';\n\nconst loginScreenValidation = yup.object().shape({\n    Email: yup.string().email(\"Please provide a valid email.\").required(\"Email is required.\"),\n    Password: yup.string().required(\"Password is required.\")\n});\n\nconst resetPasswordValidation = yup.object().shape({\n    Email: yup.string().email(\"Please provide a valid email.\").required(\"Email is required.\")\n});\n\nconst registerScreenValidation = yup.object().shape({\n    Name: yup.string().required(\"Name is required.\"),\n    Email: yup.string().email(\"Please provide a valid email.\").required(\"Email is required.\"),\n    Password: yup.string().required(\"Password is required.\").min(6, \"Password must be at least 6 characters.\")\n});\n\nconst addBudgetValidation = yup.object().shape({\n    BudgetName: yup.string().required(\"Budget name is required.\")\n});\n\nexport {loginScreenValidation, resetPasswordValidation, registerScreenValidation, addBudgetValidation};\n\n"],"sourceRoot":""}