{"version":3,"sources":["Components/Reset.js","firebase-config.js","Components/FormValidation.js"],"names":["Reset","isLoading","setIsLoading","useAuthState","auth","user","loading","navigate","useNavigate","useEffect","form","useRef","useForm","resolver","yupResolver","resetPasswordValidation","register","handleSubmit","errors","formState","className","ref","onSubmit","data","sendPasswordReset","Email","Group","controlId","Control","type","placeholder","name","message","variant","to","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth","db","getFirestore","fetchDataToDB","q","query","collection","where","uid","getDocs","docs","length","addDoc","displayName","authProvider","email","console","error","alert","googleProvider","GoogleAuthProvider","signInWithGoogle","signInWithRedirect","logInWithEmailAndPassword","password","signInWithEmailAndPassword","registerWithEmailAndPassword","createUserWithEmailAndPassword","res","sendPasswordResetEmail","logout","signOut","loginScreenValidation","yup","shape","required","Password","registerScreenValidation","Name","min","BudgetName"],"mappings":"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","file":"static/js/9.1c9d18a8.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\nimport {useAuthState} from \"react-firebase-hooks/auth\";\nimport {useNavigate} from \"react-router-dom\";\nimport {auth, logInWithEmailAndPassword, sendPasswordReset, signInWithGoogle} from \"../firebase-config\";\nimport {Button, Form} from \"react-bootstrap\";\nimport {LinkContainer} from \"react-router-bootstrap\";\nimport {MDBCard} from \"mdb-react-ui-kit\";\nimport LoadingScreen from \"./LoadingScreen\";\nimport {useForm} from \"react-hook-form\";\nimport {yupResolver} from \"@hookform/resolvers/yup\";\nimport {resetPasswordValidation} from \"./FormValidation\";\n\nfunction Reset({isLoading, setIsLoading}) {\n\n    const [user, loading] = useAuthState(auth);\n    const navigate = useNavigate();\n    useEffect(() => {\n        if (loading) {\n            setIsLoading(true);\n            return\n        }\n        if (loading === false) {\n            setIsLoading(false);\n        }\n        if (user) navigate(\"/dashboard\");\n    }, [user, loading]);\n\n    const form = useRef();\n\n    const {register, handleSubmit, formState: {errors}} = useForm({\n        resolver: yupResolver(resetPasswordValidation)\n    });\n\n    const onSubmit = (data) => {\n        sendPasswordReset(data.Email);\n    }\n\n    return (\n        <>\n            {isLoading ? <LoadingScreen/> :\n                <div className={\"Login-Container\"}>\n                    <MDBCard>\n                        <Form ref={form} onSubmit={handleSubmit(onSubmit)} className={'Form-Contact'}>\n                            <Form.Group className=\"form-content\" controlId=\"formBasicEmail\">\n                                <Form.Control type=\"text\" placeholder=\"Email\" name=\"user_email\" {...register(\"Email\")}/>\n                                <p>{errors.Email?.message}</p>\n                            </Form.Group>\n                            <Button variant=\"secondary\" type=\"submit\" className='Button-Register'>Send password reset\n                                email</Button>\n                            <p>Already have account? <LinkContainer to={'/login'}>\n                                <a>Login</a>\n                            </LinkContainer></p>\n                            <p>Not a member? <LinkContainer to=\"/register\"><a>Register</a></LinkContainer></p>\n                        </Form>\n                    </MDBCard>\n                </div>\n            }\n        </>\n    );\n}\n\nexport default Reset;\n","// Import the functions you need from the SDKs you need\nimport {initializeApp} from \"firebase/app\";\nimport {\n    GoogleAuthProvider,\n    getAuth,\n    signInWithRedirect,\n    signInWithEmailAndPassword,\n    createUserWithEmailAndPassword,\n    sendPasswordResetEmail,\n    signOut\n} from \"firebase/auth\";\nimport {\n    getFirestore,\n    query,\n    getDocs,\n    collection,\n    where,\n    addDoc\n} from \"firebase/firestore\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC3DMSjnUoA9dF9GM17-cXY2vGrD01UOsg\",\n    authDomain: \"budget-app-fba0d.firebaseapp.com\",\n    projectId: \"budget-app-fba0d\",\n    storageBucket: \"budget-app-fba0d.appspot.com\",\n    messagingSenderId: \"304622335247\",\n    appId: \"1:304622335247:web:fed99b704be7ad5cdafa7a\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth();\nconst db = getFirestore();\n\nconst fetchDataToDB = async (user) => {\n    try{\n        const q = query(collection(db, \"users\"), where(\"uid\", \"==\", user.uid));\n        const docs = await getDocs(q);\n        if (docs.docs.length === 0) {\n            await addDoc(collection(db, \"users\"), {\n                uid: user.uid,\n                name: user.displayName,\n                authProvider: \"google\",\n                email: user.email\n            });\n        }\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\n\nconst googleProvider = new GoogleAuthProvider();\nconst signInWithGoogle = async () => {\n    try {\n        await signInWithRedirect(auth, googleProvider);\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\n\nconst logInWithEmailAndPassword = async (email, password) => {\n    try {\n        await signInWithEmailAndPassword(auth, email, password);\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\nconst registerWithEmailAndPassword = async (name, email, password) => {\n    try {\n        const res = await createUserWithEmailAndPassword(auth, email, password);\n        const user = res.user;\n        await addDoc(collection(db, \"users\"), {\n            uid: user.uid,\n            name,\n            authProvider: \"local\",\n            email\n        });\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\nconst sendPasswordReset = async (email) => {\n    try {\n        await sendPasswordResetEmail(auth, email);\n        alert(\"Password reset email sent\");\n\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\nconst logout = () => {\n    signOut(auth);\n};\nexport {\n    auth,\n    db,\n    signInWithGoogle,\n    logInWithEmailAndPassword,\n    registerWithEmailAndPassword,\n    sendPasswordReset,\n    logout,\n    fetchDataToDB\n};\n","import * as yup from 'yup';\n\nconst loginScreenValidation = yup.object().shape({\n    Email: yup.string().email(\"Please provide a valid email.\").required(\"Email is required.\"),\n    Password: yup.string().required(\"Password is required.\")\n});\n\nconst resetPasswordValidation = yup.object().shape({\n    Email: yup.string().email(\"Please provide a valid email.\").required(\"Email is required.\")\n});\n\nconst registerScreenValidation = yup.object().shape({\n    Name: yup.string().required(\"Name is required.\"),\n    Email: yup.string().email(\"Please provide a valid email.\").required(\"Email is required.\"),\n    Password: yup.string().required(\"Password is required.\").min(6, \"Password must be at least 6 characters.\")\n});\n\nconst addBudgetValidation = yup.object().shape({\n    BudgetName: yup.string().required(\"Budget name is required.\")\n});\n\nexport {loginScreenValidation, resetPasswordValidation, registerScreenValidation, addBudgetValidation};\n\n"],"sourceRoot":""}